require(tidyquant)
require(readxl)
require(foreach)
require(doParallel)
require(data.table)
require(tidyquant)
require(readxl)
require(foreach)
require(doParallel)
require(data.table)
#### Set Number of Processing Cores
registerDoParallel(detectCores()-1) # Mac or Linux
#registerDoParallel(max((detectCores()/2)-1,1)) # Windows
print(paste("This machine has",detectCores(),"cores and is using",getDoParWorkers(),"core(s)."))
#### Working Directory
setwd("/Users/s73f4n/code/Teaching/Portfolio")
#### Load and Prepare Data
data=read_excel("Data/Bloomberg Collection.xlsx",sheet="Static",skip=3,col_names=FALSE)
head(data)
colnames(data)=c("Date",colnames(read_excel("Data/Bloomberg Collection.xlsx",sheet="Static",n_max = 0)))
head(data)
data=as.data.table(data)
head(data)
# Forward-Looking Expectations
RP=read_excel("Data/Bloomberg Collection.xlsx",sheet="Static",n_max=2)
RP
colnames(RP)[1]="Series"
rf=mean(tail(data$RF,3)); RP[,RF:=c(0,rf)]
#rf=mean(tail(data$RF,3)); RP[,RF:=c(0,rf)]
returns=as.numeric(RP[2,3:ncol(RP)])
head(returns)
#### Covariance Matrix of Risky Assets ####
Sigma=cov(data[,3:ncol(data)])
Sigma
#### Specify Starting Weights ####
weight0=rep(1/nrow(Sigma),nrow(Sigma)) # Equal Weights
weight0
# Performance Not Optimized
rp=t(weight0) %*% returns # Risk Premium
rp
sd=sqrt(t(weight0) %*% (Sigma %*% weight0)) # Standard Deviation
sd
sharpe=rp/sd # Sharpe Ratio
sharpe
